package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/url"
	"time"

	"myprivatenetwork/internal/xray"

	"encoding/base64"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º XRay –º–µ–Ω–µ–¥–∂–µ—Ä
	xrayManager, err := xray.NewXrayManager(SERVER_URL, USERNAME, PASSWORD)
	if err != nil {
		log.Fatalf("Failed to create XRay manager: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(BOT_TOKEN)
	if err != nil {
		log.Fatalf("Failed to create bot: %v", err)
	}

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
		if update.Message.IsCommand() {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

			switch update.Message.Command() {
			case "start":
				msg.Text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN.\n" +
					"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
					"/create - —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n" +
					"/qr - –ø–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n" +
					"/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"

			case "create":
				// –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —á–∞—Ç–∞ –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				userID := fmt.Sprintf("tg_%d", update.Message.Chat.ID)
				link, err := xrayManager.CreateClient(userID)
				if err != nil {
					msg.Text = fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
					break
				}

				// –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥
				qrURL := fmt.Sprintf("https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=%s",
					url.QueryEscape(link))

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å QR –∫–æ–¥–æ–º
				photo := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FileURL(qrURL))
				photo.Caption = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
				bot.Send(photo)
				continue

			case "qr":
				userID := fmt.Sprintf("tg_%d", update.Message.Chat.ID)
				exists, err := xrayManager.ClientExists(userID)
				if err != nil {
					msg.Text = fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
					break
				}

				if !exists {
					msg.Text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è"
					break
				}

				// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–ª–∏–µ–Ω—Ç–µ
				clientInfo, err := xrayManager.GetClientInfo(userID)
				if err != nil {
					msg.Text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
					break
				}

				// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
				link := generateVmessLink(clientInfo.ID, userID, clientInfo.Port)
				if link == "" {
					msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
					break
				}

				// –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥
				qrURL := fmt.Sprintf("https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=%s",
					url.QueryEscape(link))

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
				photo := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FileURL(qrURL))
				photo.Caption = fmt.Sprintf("–í–∞—à QR –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: %s", link)
				bot.Send(photo)
				continue

			case "info":
				userID := fmt.Sprintf("tg_%d", update.Message.Chat.ID)
				info, err := xrayManager.GetClientInfo(userID)
				if err != nil {
					msg.Text = fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: %v", err)
					break
				}

				// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
				formatBytes := func(bytes int64) string {
					const unit = 1024
					if bytes < unit {
						return fmt.Sprintf("%d B", bytes)
					}
					div, exp := int64(unit), 0
					for n := bytes / unit; n >= unit; n /= unit {
						div *= unit
						exp++
					}
					return fmt.Sprintf("%.1f %cB",
						float64(bytes)/float64(div), "KMGTPE"[exp])
				}

				// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
				timeLeft := time.Until(info.ExpiryTime)
				daysLeft := int(timeLeft.Hours() / 24)

				msg.Text = fmt.Sprintf("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:\n\n"+
					"üìä –¢—Ä–∞—Ñ–∏–∫:\n"+
					"‚Üë –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s\n"+
					"‚Üì –ü–æ–ª—É—á–µ–Ω–æ: %s\n"+
					"üíæ –û–±—â–∏–π –ª–∏–º–∏—Ç: %s\n\n"+
					"‚åõÔ∏è –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: %d\n"+
					"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: %s",
					formatBytes(info.Up),
					formatBytes(info.Down),
					formatBytes(info.Total),
					daysLeft,
					info.ExpiryTime.Format("02.01.2006 15:04"))

			default:
				msg.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
			}

			if _, err := bot.Send(msg); err != nil {
				log.Printf("Error sending message: %v", err)
			}
		}
	}
}

func generateVmessLink(clientID, email string, port int) string {
	config := xray.VmessConfig{
		Version: "2",
		Name:    email,
		Address: "116.203.117.243",
		Port:    port,
		ID:      clientID,
		Aid:     0,
		Net:     "tcp",
		Type:    "none",
		Host:    "",
		Path:    "",
		TLS:     "none",
		SNI:     "",
	}

	configJSON, err := json.Marshal(config)
	if err != nil {
		return ""
	}

	return "vmess://" + base64.StdEncoding.EncodeToString(configJSON)
}
