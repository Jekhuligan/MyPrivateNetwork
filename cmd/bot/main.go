package main

import (
	"fmt"
	"log"
	"net/url"
	"strings"
	"time"

	"myprivatenetwork/cmd/xray"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –î–æ–±–∞–≤–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserState struct {
	WaitingForStars bool
	StarsRequired   int
}

// –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
var userStates = make(map[int64]*UserState)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º XRay –º–µ–Ω–µ–¥–∂–µ—Ä
	xrayManager, err := xray.NewXrayManager(SERVER_URL, USERNAME, PASSWORD)
	if err != nil {
		log.Fatalf("Failed to create XRay manager: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(BOT_TOKEN)
	if err != nil {
		log.Fatalf("Failed to create bot: %v", err)
	}

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
			userID := update.Message.Chat.ID
			state, exists := userStates[userID]
			if !exists {
				state = &UserState{
					WaitingForStars: false,
					StarsRequired:   5,
				}
				userStates[userID] = state
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–≤–µ–∑–¥—ã
			if update.Message.Text != "" && strings.Contains(update.Message.Text, "‚≠êÔ∏è") {
				stars := countStars(update.Message.Text)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∑–≤–µ–∑–¥—ã –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				if state.WaitingForStars {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

					if stars >= state.StarsRequired {
						// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
						userEmail := fmt.Sprintf("tg_%d", update.Message.Chat.ID)
						link, err := xrayManager.CreateClient(userEmail)
						if err != nil {
							msg.Text = fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
						} else {
							// –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥
							qrURL := fmt.Sprintf("https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=%s",
								url.QueryEscape(link))

							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å QR –∫–æ–¥–æ–º
							photo := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FileURL(qrURL))
							photo.Caption = fmt.Sprintf("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n%s", link)
							bot.Send(photo)

							// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
							state.WaitingForStars = false
						}
					} else {
						msg.Text = fmt.Sprintf("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ %d ‚≠êÔ∏è, –ø–æ–ª—É—á–µ–Ω–æ %d ‚≠êÔ∏è",
							state.StarsRequired, stars)
					}

					if _, err := bot.Send(msg); err != nil {
						log.Printf("Error sending message: %v", err)
					}
				}
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
			if update.Message.IsCommand() {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

				switch update.Message.Command() {
				case "start":
					msg.Text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN.\n" +
						"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
						"/create - —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (—Å—Ç–æ–∏–º–æ—Å—Ç—å: 5 ‚≠êÔ∏è)\n" +
						"/qr - –ø–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n" +
						"/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏\n\n" +
						"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ ‚≠êÔ∏è"

				case "create":
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
					userEmail := fmt.Sprintf("tg_%d", update.Message.Chat.ID)
					exists, err := xrayManager.ClientExists(userEmail)
					if err != nil {
						msg.Text = fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
						break
					}

					if exists {
						msg.Text = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /qr –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
						break
					}

					// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–ª–∞—Ç—É –∑–≤–µ–∑–¥–∞–º–∏
					state.WaitingForStars = true
					msg.Text = fmt.Sprintf("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ %d ‚≠êÔ∏è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏", state.StarsRequired)

				case "qr":
					userID := fmt.Sprintf("tg_%d", update.Message.Chat.ID)
					exists, err := xrayManager.ClientExists(userID)
					if err != nil {
						msg.Text = fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
						break
					}

					if !exists {
						msg.Text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è"
						break
					}

					// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–ª–∏–µ–Ω—Ç–µ
					clientInfo, err := xrayManager.GetClientInfo(userID)
					if err != nil {
						msg.Text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
						break
					}

					// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
					link := xrayManager.GenerateVmessLink(clientInfo.ID, userID, clientInfo.Port)
					if link == "" {
						msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
						break
					}

					// –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥
					qrURL := fmt.Sprintf("https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=%s",
						url.QueryEscape(link))

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
					photo := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FileURL(qrURL))
					photo.Caption = fmt.Sprintf("–í–∞—à QR –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: %s", link)
					bot.Send(photo)

				case "info":
					userID := fmt.Sprintf("tg_%d", update.Message.Chat.ID)
					info, err := xrayManager.GetClientInfo(userID)
					if err != nil {
						msg.Text = fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: %v", err)
						break
					}

					// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
					formatBytes := func(bytes int64) string {
						const unit = 1024
						if bytes < unit {
							return fmt.Sprintf("%d B", bytes)
						}
						div, exp := int64(unit), 0
						for n := bytes / unit; n >= unit; n /= unit {
							div *= unit
							exp++
						}
						return fmt.Sprintf("%.1f %cB",
							float64(bytes)/float64(div), "KMGTPE"[exp])
					}

					// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
					timeLeft := time.Until(info.ExpiryTime)
					daysLeft := int(timeLeft.Hours() / 24)

					msg.Text = fmt.Sprintf("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:\n\n"+
						"üìä –¢—Ä–∞—Ñ–∏–∫:\n"+
						"‚Üë –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s\n"+
						"‚Üì –ü–æ–ª—É—á–µ–Ω–æ: %s\n"+
						"üíæ –û–±—â–∏–π –ª–∏–º–∏—Ç: %s\n\n"+
						"‚åõÔ∏è –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: %d\n"+
						"ÔøΩÔøΩ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: %s",
						formatBytes(info.Up),
						formatBytes(info.Down),
						formatBytes(info.Total),
						daysLeft,
						info.ExpiryTime.Format("02.01.2006 15:04"))

				default:
					msg.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
				}

				if _, err := bot.Send(msg); err != nil {
					log.Printf("Error sending message: %v", err)
				}
			}
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–≤–µ–∑–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
func countStars(text string) int {
	return strings.Count(text, "‚≠ê")
}
